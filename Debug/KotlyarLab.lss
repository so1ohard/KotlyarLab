
KotlyarLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcb  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097b  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d6  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000180  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6e c0       	rjmp	.+220    	; 0x11a <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2c c0       	rjmp	.+88     	; 0xae <__vector_21>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	b7 c0       	rjmp	.+366    	; 0x1e8 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2f d0       	rcall	.+94     	; 0x108 <main>
  aa:	dc c0       	rjmp	.+440    	; 0x264 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_21>:
uint8_t adcTrBuffer[2] = {0};
uint8_t adcReady = 0;
uint8_t adcTrFlag = 0;

ISR(ADC_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	localAdcValue[1] = ADCL;
  c6:	94 b1       	in	r25, 0x04	; 4
  c8:	e3 e0       	ldi	r30, 0x03	; 3
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	91 83       	std	Z+1, r25	; 0x01
	localAdcValue[0] = ADCH;
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	80 83       	st	Z, r24
	
	if(!adcTrFlag) //Если в данный момент данные не передаются
  d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	21 11       	cpse	r18, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__vector_21+0x34>
	{
		adcTrBuffer[1] = localAdcValue[1];
  da:	e1 e0       	ldi	r30, 0x01	; 1
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	91 83       	std	Z+1, r25	; 0x01
		adcTrBuffer[0] = localAdcValue[0];
  e0:	80 83       	st	Z, r24
	}
	
	//adcReady = 1;
	//adcValue = (adc_high << 8) | adc_low;
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0b be       	out	0x3b, r0	; 59
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <ADC_Init>:

void ADC_Init(void)		//АЦП включён и срабатывает "по требованию"
{
	ADC_CONTROL |= (1<<ADEN)	//Включаем АЦП
  fa:	86 b1       	in	r24, 0x06	; 6
  fc:	8e 6e       	ori	r24, 0xEE	; 238
  fe:	86 b9       	out	0x06, r24	; 6
				| (1<<ADSC)		//Запуск преобразования
				| (1<<ADFR)		//Непрерывный режим работы АЦП
				| (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0) //Выставляем частоту 125 кГц - предделитель 64
				| (1<<ADIE);	 //Разрешение прерывания от АЦП
				
	ADMUX	|= (1<<REFS1) | (1<<REFS0);/*Внутренний источник, вход ADC0 = PF0. Если нужен какой-то другой канал, то указываем 
 100:	87 b1       	in	r24, 0x07	; 7
 102:	80 6c       	ori	r24, 0xC0	; 192
 104:	87 b9       	out	0x07, r24	; 7
 106:	08 95       	ret

00000108 <main>:
{
	TCCR0 = (1<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00)|	//Режим CTC, OC0 отключен
	(1<<CS02) | (0<<CS01) | (0<<CS00);							//Предделитель 64 
	TCNT0 = 0x00;												//Сбрасываем регистр счёта 
	OCR0 = ((F_CPU/64)/1000) - 1;								//Число до которого считаем
	TIMSK |= (1<<OCIE0);	
 108:	f8 df       	rcall	.-16     	; 0xfa <ADC_Init>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	72 ec       	ldi	r23, 0xC2	; 194
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	1a d0       	rcall	.+52     	; 0x148 <USART_Init>
 114:	9c d0       	rcall	.+312    	; 0x24e <USART_receive>
 116:	2b d0       	rcall	.+86     	; 0x16e <USART_transmit>
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0xc>

0000011a <__vector_15>:
}

ISR(MILLIS_TIMER)  //Срабатывает каждую миллисекунду
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
	_millis++;
 126:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_millis>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_millis>
}
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <millis>:

uint32_t millis(void)	//Функция, возвращающая количество миллисекунд
{
	return _millis;
 13c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <_millis>
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <USART_Init>:
uint8_t rxBuffer[3] = {0};
uint8_t rxIndex = 0;
uint8_t readyFlag = 0;

void USART_Init(unsigned long int baudRate)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
	//Устанавливаем скорость
	RADIO_UBRRH = (uint8_t)(baudRate >> 8);
 14c:	07 2f       	mov	r16, r23
 14e:	18 2f       	mov	r17, r24
 150:	29 2f       	mov	r18, r25
 152:	33 27       	eor	r19, r19
 154:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	RADIO_UBRRL = (uint8_t)baudRate;
 158:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	RADIO_UCSRB = (1<<RADIO_RXEN) | (1<<RADIO_TXEN) | (1<<RADIO_RXCIE); //Разрешаем приём, передачу и прерывание по приёму
 15c:	88 e9       	ldi	r24, 0x98	; 152
 15e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	//Set character size
	RADIO_UCSRC = (1<<RADIO_UCSZ1) | (1<<RADIO_UCSZ0);	//Размер данных 8 бит
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
}
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <USART_transmit>:

void USART_transmit() //Передаём данные по UART раз в интервал времени
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
	if((millis() - lastDataTransmit) > TRANSMIT_INTERVAL) //Передаём раз в секунду
 172:	e4 df       	rcall	.-56     	; 0x13c <millis>
 174:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <lastDataTransmit>
 178:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <lastDataTransmit+0x1>
 17c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <lastDataTransmit+0x2>
 180:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <lastDataTransmit+0x3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	80 1b       	sub	r24, r16
 18a:	91 0b       	sbc	r25, r17
 18c:	a2 0b       	sbc	r26, r18
 18e:	b3 0b       	sbc	r27, r19
 190:	89 3e       	cpi	r24, 0xE9	; 233
 192:	93 40       	sbci	r25, 0x03	; 3
 194:	a1 05       	cpc	r26, r1
 196:	b1 05       	cpc	r27, r1
 198:	20 f1       	brcs	.+72     	; 0x1e2 <USART_transmit+0x74>
	{
		//if(adcTrFlag)
		//{
		//TODO:
		adcTrFlag = 1;  // Запрещаем перезапись данных в буфере АЦП
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if(rxIndex < 2)	//Если ещё не конец буфера
 1a0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <rxIndex>
 1a4:	e2 30       	cpi	r30, 0x02	; 2
 1a6:	80 f4       	brcc	.+32     	; 0x1c8 <USART_transmit+0x5a>
		{
			if(RADIO_UCSRA & (1<<RADIO_UDRE))	//Если регистр передачи свободен
 1a8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1ac:	85 ff       	sbrs	r24, 5
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <USART_transmit+0x74>
			{
				RADIO_UDR = adcTrBuffer[rxIndex];	//Передаём часть числа АЦП
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	ef 5f       	subi	r30, 0xFF	; 255
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	80 81       	ld	r24, Z
 1b8:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				rxIndex++;							//Инкрементируем индекс
 1bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rxIndex>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rxIndex>
			}
		}
		else //Если буфер закончился 
		{			
			lastDataTransmit = millis(); //Записываем последнее время передачи
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <USART_transmit+0x74>
 1c8:	b9 df       	rcall	.-142    	; 0x13c <millis>
 1ca:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lastDataTransmit>
 1ce:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lastDataTransmit+0x1>
 1d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <lastDataTransmit+0x2>
 1d6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <lastDataTransmit+0x3>
			rxIndex = 0;	//Сбрасываем индекс буфера 
 1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rxIndex>
			adcTrFlag = 0;	//Разрешаем перезапись данных в буфере АЦП
 1de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		//}
	}
}
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <__vector_30>:

ISR(RADIO_RX_vect)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	0b b6       	in	r0, 0x3b	; 59
 1f4:	0f 92       	push	r0
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	uint8_t buf = RADIO_UDR;	//Считываем данные из регистра обмена
 1fe:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buf == PACKET_HEADER)				//Если считанный элемент равен 0х0A, значит это начало пакета
 202:	9e 3e       	cpi	r25, 0xEE	; 238
 204:	11 f4       	brne	.+4      	; 0x20a <__vector_30+0x22>
	{
		rxIndex = 0;
 206:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rxIndex>
	}
	if(readFlag == 0) //Если мы прочитали данные из буфера
 20a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <readFlag>
 20e:	81 11       	cpse	r24, r1
 210:	13 c0       	rjmp	.+38     	; 0x238 <__vector_30+0x50>
	{
		if(rxIndex < MAX_RX_SIZE) //И текущий индекс меньше максимального
 212:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rxIndex>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	78 f4       	brcc	.+30     	; 0x238 <__vector_30+0x50>
		{
			readyFlag = 0;				//Т.к. мы заполняем массив, то сбрасываем флаг готовности
 21a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readyFlag>
			rxBuffer[rxIndex] = buf;	//Помещаем полученный байт в буфер
 21e:	e8 2f       	mov	r30, r24
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e8 5f       	subi	r30, 0xF8	; 248
 224:	fe 4f       	sbci	r31, 0xFE	; 254
 226:	90 83       	st	Z, r25
			rxIndex++;					//Инкремент индекса буфера
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rxIndex>
			if (rxIndex == MAX_RX_SIZE) //Если достигли конца буфера
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	19 f4       	brne	.+6      	; 0x238 <__vector_30+0x50>
			{
				readyFlag = 1;			//Взводим флаг готовности данных
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <readyFlag>
			}
		}
	}
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0b be       	out	0x3b, r0	; 59
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <USART_receive>:

void USART_receive()
{
	cli();
 24e:	f8 94       	cli
	if(readyFlag == 1)
 250:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <readyFlag>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	21 f4       	brne	.+8      	; 0x260 <USART_receive+0x12>
	{
		readFlag = 1;
 258:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <readFlag>
		readyFlag = 0;
 25c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <readyFlag>
	}
	sei();
 260:	78 94       	sei
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
